// <auto-generated />
using System;
using System.Collections.Generic;
using Dotnet.Playground.DI.Data;
using Dotnet.Playground.Model.Authorization.Permissions;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Dotnet.PlaygroundMigrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250513053045_AddAchievementNamespaceModels")]
    partial class AddAchievementNamespaceModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Dotnet.Playground.Model.Achievement.BaseAscent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Instant>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("ascent_type")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("ascent_type");

                    b.HasKey("Id")
                        .HasName("pk_ascents");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_ascents_user_id");

                    b.ToTable("ascents", (string)null);

                    b.HasDiscriminator<string>("ascent_type").HasValue("BaseAscent");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Authorization.Permissions.OrganizationPermission", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("Permission")
                        .HasColumnType("integer")
                        .HasColumnName("permission");

                    b.HasKey("OrganizationId", "UserId", "Permission")
                        .HasName("pk_organization_permissions");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_organization_permissions_user_id");

                    b.ToTable("organization_permissions", (string)null);
                });

            modelBuilder.Entity("Dotnet.Playground.Model.BaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Location.RoutePitch", b =>
                {
                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("route_id");

                    b.Property<Guid>("PitchId")
                        .HasColumnType("uuid")
                        .HasColumnName("pitch_id");

                    b.Property<int>("PitchNumber")
                        .HasColumnType("integer")
                        .HasColumnName("pitch_number");

                    b.HasKey("RouteId", "PitchId")
                        .HasName("pk_route_pitches");

                    b.HasIndex("PitchId")
                        .HasDatabaseName("ix_route_pitches_pitch_id");

                    b.ToTable("route_pitches", (string)null);
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Organizations.OrganizationTeamUser", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.Property<Guid>("OrganizationTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_team_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<ICollection<Permission>>("Permissions")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("permissions");

                    b.HasKey("OrganizationId", "OrganizationTeamId", "UserId")
                        .HasName("pk_organization_team_users");

                    b.HasIndex("OrganizationTeamId")
                        .HasDatabaseName("ix_organization_team_users_organization_team_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_organization_team_users_user_id");

                    b.HasIndex("OrganizationId", "UserId")
                        .HasDatabaseName("ix_organization_team_users_organization_id_user_id");

                    b.ToTable("organization_team_users", (string)null);
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Organizations.OrganizationUser", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("OrganizationId", "UserId")
                        .HasName("pk_organization_users");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_organization_users_user_id");

                    b.ToTable("organization_users", (string)null);
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Achievement.PitchAscent", b =>
                {
                    b.HasBaseType("Dotnet.Playground.Model.Achievement.BaseAscent");

                    b.Property<Guid>("PitchId")
                        .HasColumnType("uuid")
                        .HasColumnName("pitch_id");

                    b.HasIndex("PitchId")
                        .HasDatabaseName("ix_ascents_pitch_id");

                    b.HasDiscriminator().HasValue("pitch");
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Achievement.RouteAscent", b =>
                {
                    b.HasBaseType("Dotnet.Playground.Model.Achievement.BaseAscent");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("route_id");

                    b.HasIndex("RouteId")
                        .HasDatabaseName("ix_ascents_route_id");

                    b.HasDiscriminator().HasValue("route");
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Authentication.User", b =>
                {
                    b.HasBaseType("Dotnet.Playground.Model.BaseEntity");

                    b.Property<ICollection<Permission>>("AdminPermissions")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("admin_permissions");

                    b.Property<string>("Auth0UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("auth0_user_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<Instant>("LastLogin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login");

                    b.Property<ICollection<Permission>>("PlatformPermissions")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("platform_permissions");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasIndex("Auth0UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_auth0_user_id");

                    b.HasIndex("Email")
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Image", b =>
                {
                    b.HasBaseType("Dotnet.Playground.Model.BaseEntity");

                    b.Property<string>("Bucket")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bucket");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<Guid?>("RelatedEntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("related_entity_id");

                    b.Property<Guid?>("UploaderId")
                        .HasColumnType("uuid")
                        .HasColumnName("uploader_id");

                    b.HasIndex("UploaderId")
                        .HasDatabaseName("ix_images_uploader_id");

                    b.ToTable("images", (string)null);
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Location.Area", b =>
                {
                    b.HasBaseType("Dotnet.Playground.Model.BaseEntity");

                    b.Property<MultiPolygon>("Boundary")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("boundary");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("location");

                    b.Property<Guid?>("MaintainerOrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("maintainer_organization_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasIndex("MaintainerOrganizationId")
                        .HasDatabaseName("ix_areas_maintainer_organization_id");

                    b.ToTable("areas");
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Location.Pitch", b =>
                {
                    b.HasBaseType("Dotnet.Playground.Model.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("SectorId")
                        .HasColumnType("uuid")
                        .HasColumnName("sector_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasIndex("SectorId")
                        .HasDatabaseName("ix_pitches_sector_id");

                    b.ToTable("pitches", (string)null);
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Location.Route", b =>
                {
                    b.HasBaseType("Dotnet.Playground.Model.BaseEntity");

                    b.Property<string>("BolterName")
                        .HasColumnType("text")
                        .HasColumnName("bolter_name");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("FirstAscentClimberName")
                        .HasColumnType("text")
                        .HasColumnName("first_ascent_climber_name");

                    b.Property<Instant?>("FirstAscentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_ascent_date");

                    b.Property<string>("Grade")
                        .HasColumnType("text")
                        .HasColumnName("grade");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("SectorId")
                        .HasColumnType("uuid")
                        .HasColumnName("sector_id");

                    b.Property<Guid?>("TopoImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("topo_image_id");

                    b.HasIndex("SectorId")
                        .HasDatabaseName("ix_routes_sector_id");

                    b.HasIndex("TopoImageId")
                        .IsUnique()
                        .HasDatabaseName("ix_routes_topo_image_id");

                    b.ToTable("routes", (string)null);
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Location.Sector", b =>
                {
                    b.HasBaseType("Dotnet.Playground.Model.BaseEntity");

                    b.Property<LineString>("ApproachPath")
                        .HasColumnType("geometry")
                        .HasColumnName("approach_path");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uuid")
                        .HasColumnName("area_id");

                    b.Property<Point>("EntryPoint")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("entry_point");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Point>("RecommendedParkingLocation")
                        .HasColumnType("geometry")
                        .HasColumnName("recommended_parking_location");

                    b.Property<Polygon>("SectorArea")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("sector_area");

                    b.HasIndex("AreaId")
                        .HasDatabaseName("ix_sectors_area_id");

                    b.ToTable("sectors", (string)null);
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Organizations.Organization", b =>
                {
                    b.HasBaseType("Dotnet.Playground.Model.BaseEntity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.ToTable("organizations", (string)null);
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Organizations.OrganizationTeam", b =>
                {
                    b.HasBaseType("Dotnet.Playground.Model.BaseEntity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ix_organization_teams_organization_id");

                    b.ToTable("organization_teams", (string)null);
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Achievement.BaseAscent", b =>
                {
                    b.HasOne("Dotnet.Playground.Model.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ascents_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Authorization.Permissions.OrganizationPermission", b =>
                {
                    b.HasOne("Dotnet.Playground.Model.Organizations.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organization_permissions_organizations_organization_id");

                    b.HasOne("Dotnet.Playground.Model.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organization_permissions_users_user_id");

                    b.HasOne("Dotnet.Playground.Model.Organizations.OrganizationUser", "OrganizationUser")
                        .WithMany("Permissions")
                        .HasForeignKey("OrganizationId", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organization_permissions_organization_users_organization_id");

                    b.Navigation("Organization");

                    b.Navigation("OrganizationUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Location.RoutePitch", b =>
                {
                    b.HasOne("Dotnet.Playground.Model.Location.Pitch", "Pitch")
                        .WithMany()
                        .HasForeignKey("PitchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_route_pitches_pitches_pitch_id");

                    b.HasOne("Dotnet.Playground.Model.Location.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_route_pitches_routes_route_id");

                    b.Navigation("Pitch");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Organizations.OrganizationTeamUser", b =>
                {
                    b.HasOne("Dotnet.Playground.Model.Organizations.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organization_team_users_organizations_organization_id");

                    b.HasOne("Dotnet.Playground.Model.Organizations.OrganizationTeam", "OrganizationTeam")
                        .WithMany("OrganizationTeamUsers")
                        .HasForeignKey("OrganizationTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organization_team_users_organization_teams_organization_tea");

                    b.HasOne("Dotnet.Playground.Model.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organization_team_users_users_user_id");

                    b.HasOne("Dotnet.Playground.Model.Organizations.OrganizationUser", "OrganizationUser")
                        .WithMany("OrganizationTeamUsers")
                        .HasForeignKey("OrganizationId", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organization_team_users_organization_users_organization_id_");

                    b.Navigation("Organization");

                    b.Navigation("OrganizationTeam");

                    b.Navigation("OrganizationUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Organizations.OrganizationUser", b =>
                {
                    b.HasOne("Dotnet.Playground.Model.Organizations.Organization", "Organization")
                        .WithMany("OrganizationUsers")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organization_users_organizations_organization_id");

                    b.HasOne("Dotnet.Playground.Model.Authentication.User", "User")
                        .WithMany("OrganizationUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organization_users_users_user_id");

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Achievement.PitchAscent", b =>
                {
                    b.HasOne("Dotnet.Playground.Model.Location.Pitch", "Pitch")
                        .WithMany()
                        .HasForeignKey("PitchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ascents_pitches_pitch_id");

                    b.Navigation("Pitch");
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Achievement.RouteAscent", b =>
                {
                    b.HasOne("Dotnet.Playground.Model.Location.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ascents_routes_route_id");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Image", b =>
                {
                    b.HasOne("Dotnet.Playground.Model.Authentication.User", "Uploader")
                        .WithMany()
                        .HasForeignKey("UploaderId")
                        .HasConstraintName("fk_images_users_uploader_id");

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Location.Area", b =>
                {
                    b.HasOne("Dotnet.Playground.Model.Organizations.Organization", "MaintainerOrganization")
                        .WithMany()
                        .HasForeignKey("MaintainerOrganizationId")
                        .HasConstraintName("fk_areas_organizations_maintainer_organization_id");

                    b.Navigation("MaintainerOrganization");
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Location.Pitch", b =>
                {
                    b.HasOne("Dotnet.Playground.Model.Location.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pitches_sectors_sector_id");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Location.Route", b =>
                {
                    b.HasOne("Dotnet.Playground.Model.Location.Sector", "Sector")
                        .WithMany("Routes")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_routes_sectors_sector_id");

                    b.HasOne("Dotnet.Playground.Model.Image", "TopoImage")
                        .WithOne("RelatedEntity")
                        .HasForeignKey("Dotnet.Playground.Model.Location.Route", "TopoImageId")
                        .HasConstraintName("fk_routes_images_topo_image_id");

                    b.Navigation("Sector");

                    b.Navigation("TopoImage");
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Location.Sector", b =>
                {
                    b.HasOne("Dotnet.Playground.Model.Location.Area", "Area")
                        .WithMany("Sectors")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sectors_areas_area_id");

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Organizations.OrganizationTeam", b =>
                {
                    b.HasOne("Dotnet.Playground.Model.Organizations.Organization", "Organization")
                        .WithMany("Teams")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organization_teams_organizations_organization_id");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Organizations.OrganizationUser", b =>
                {
                    b.Navigation("OrganizationTeamUsers");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Authentication.User", b =>
                {
                    b.Navigation("OrganizationUsers");
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Image", b =>
                {
                    b.Navigation("RelatedEntity");
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Location.Area", b =>
                {
                    b.Navigation("Sectors");
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Location.Sector", b =>
                {
                    b.Navigation("Routes");
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Organizations.Organization", b =>
                {
                    b.Navigation("OrganizationUsers");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Dotnet.Playground.Model.Organizations.OrganizationTeam", b =>
                {
                    b.Navigation("OrganizationTeamUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
